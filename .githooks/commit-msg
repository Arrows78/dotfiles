#!/bin/zsh

#############################################################
# Commit-msg hook: Conventional Commit Validator
#############################################################
#
# This commit-msg hook ensures that all commit messages
# follow the Conventional Commit specification.
#
# It validates the commit message against a strict regex
# pattern.
#
# Example of a valid commit message:
# feat(login): add user authentication
#
# If the commit message does not comply, the commit is aborted
# with an error message.
#
#############################################################

# Regex pattern for conventional commit message
COMMIT_REGEX="^(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\([-a-z0-9_]*\))?!?: .{1,100}"

# Get the commit message
commit_message=$(cat "$1")

# Function to display error messages in red
function error() {
    echo "\033[0;31m$1\033[0m"
}

# Validate the commit message with the regex
if ! [[ $commit_message =~ $COMMIT_REGEX ]]; then
    error "\n‚ùå ERROR: Invalid commit message format\n"

    echo "Your commit message:"
    echo "  \"$commit_message\""
    echo ""

    echo "Expected format:"
    echo "  <type>(<scope>)?: <description>"
    echo ""

    echo "Details:"
    echo "- <type>        Required. One of: build, chore, ci, docs, feat, fix, perf, refactor, style, test"
    echo "- <scope>       Optional. Lowercase, with hyphens or underscores (no spaces)"
    echo "- !             Optional. Indicates a breaking change (put after type or scope)"
    echo "- <description> Required. 1 to 100 characters max, describing the change"
    echo ""

    echo "‚úÖ Examples of valid messages:"
    echo "   feat(login): add user authentication"
    echo "   fix(api-client)!: change response structure"
    echo "   chore: update dependencies"
    echo ""

    error "üõë Commit aborted. Please fix your message and try again.\n"
    exit 1
fi